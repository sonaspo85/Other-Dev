<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
	This file is part of the DITA Validator project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">

	<macrodef name="get-fixable-rules">
		<attribute default="${svrl.customization.dir}/../cfg/ruleset/fix-macros.xml" name="file"/>
		<attribute name="fixable"/>
		<sequential>
			<local name="fixable.ruleset"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" property="fixable.ruleset"/>
			<xslt in="@{file}" out="${fixable.ruleset}" style="${dita.plugin.com.here.validate.svrl.dir}/xsl/macros2regex.xsl"/>
			<loadfile failonerror="true" property="@{fixable}" srcfile="${fixable.ruleset}"/>
		</sequential>
	</macrodef>
	<!--
		Extract a list of rules to apply at each level

		@param fatal - The property to hold the list of fatals
		@param error - The property to hold the list of errors
		@param warning - The property to hold the list of warnings
	-->
	<macrodef name="get-validation-rulesets">
		<attribute default="${svrl.customization.dir}/../cfg/ruleset/${args.validate.ruleset}.xml" name="file"/>
		<attribute name="fatal"/>
		<attribute name="error"/>
		<attribute name="warning"/>
		<sequential>
			<local name="fatal.ruleset"/>
			<local name="error.ruleset"/>
			<local name="warning.ruleset"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" property="fatal.ruleset"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" property="error.ruleset"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" property="warning.ruleset"/>
			<xslt in="@{file}" out="${fatal.ruleset}" style="${dita.plugin.com.here.validate.svrl.dir}/xsl/ruleset2regex.xsl">
				<param expression="fatal" name="LEVEL"/>
			</xslt>
			<xslt in="@{file}" out="${error.ruleset}" style="${dita.plugin.com.here.validate.svrl.dir}/xsl/ruleset2regex.xsl">
				<param expression="error" name="LEVEL"/>
			</xslt>
			<xslt in="@{file}" out="${warning.ruleset}" style="${dita.plugin.com.here.validate.svrl.dir}/xsl/ruleset2regex.xsl">
				<param expression="warning" name="LEVEL"/>
			</xslt>
			<loadfile failonerror="true" property="@{fatal}" srcfile="${fatal.ruleset}"/>
			<loadfile failonerror="true" property="@{error}" srcfile="${error.ruleset}"/>
			<loadfile failonerror="true" property="@{warning}" srcfile="${warning.ruleset}"/>
		</sequential>
	</macrodef>
	<!--
		Add ansi color tags to output if requested.

		@param message - The string to colorize
	-->
	<scriptdef language="javascript" name="svrl-result-echo">
		<attribute name="message"/>
		<![CDATA[
			var escape = String.fromCharCode(27);
			var lf = String.fromCharCode(10);
			var input = attributes.get("message");

			var colorize = project.getProperty("com.here.validate.svrl.color");

			if (colorize) {
				input = input.replaceAll( "\\[FATAL" , escape + "[31m[FATAL");
				input = input.replaceAll( "\\[ERROR" , escape + "[31m[ERROR");
				input = input.replaceAll( "\\[WARN" , escape + "[33m[WARN");
				input = input.replaceAll( "\\[INFO" , escape + "[34m[INFO");
				input = input.replaceAll( "\\n" , escape + "[0m" + lf);
			}

			project.log(input, 1);
		]]>
	</scriptdef>

	<!--
		Fix up Markdown and MDITA files so that they are processable by DITA-OT

		@param fileset - list of files to fix
		@param dir     - the input dir of the source files
		@param level   - the location to output the fixed files
	-->
	<scriptdef language="javascript" name="fix-markdown">
		<attribute name="fileset"/>
		<attribute name="dir"/>
		<attribute name="todir"/>
<![CDATA[

var pluginDir =  project.getProperty("dita.plugin.com.here.validate.svrl.dir");
var files = attributes.get("fileset").split(';');
var dir = attributes.get("dir");
var toDir = attributes.get("todir");

eval('' + org.apache.tools.ant.util.FileUtils.readFully(
      new java.io.FileReader(pluginDir + '/resource/markdown.js' ) ) );

for (var i = 0; i < files.length; i++){

	if (files[i] !== "") {
		var type = files[i].endsWith('md') ? 'markdown' : 'mdita';
		var text = org.apache.tools.ant.util.FileUtils.readFully(
				new java.io.FileReader(dir + '/' + files[i]));
		var analysis = Markdown.analyseMarkup(text);
		var fixedText = Markdown.fixMarkup(text, analysis.headers, type);
		Markdown.writeMarkup(files[i], fixedText, toDir);
    }
}

]]>
	</scriptdef>
</antlib>